# -*- coding: utf-8 -*-
"""AI Sentiment Analyzer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QSXa-aFfy72eKyq4VP1UBavtPhTnk-Y0
"""

# -*- coding: utf-8 -*-
"""AI Sentiment Analyzer (Colab & Terminal)
- Analyzes sentiment of input sentences with TextBlob
- Saves results to CSV
- Color output in terminal (colorama)
- HTML-colored output in Colab
"""

import os, sys, csv
from textblob import TextBlob
from faker import Faker
from colorama import Fore, init


IN_COLAB = ('google.colab' in sys.modules) or ('COLAB_RELEASE_TAG' in os.environ)
try:
    from IPython.display import display, HTML
    HAVE_HTML = True
except Exception:
    HAVE_HTML = False


init(autoreset=True)

fake = Faker()
CSV_FILE = os.environ.get("CSV_FILE", "sentiment_results.csv")

def ensure_csv():
    """Ensure CSV has header."""
    if not os.path.exists(CSV_FILE):
        with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow(["Sentence", "Sentiment"])

def save_to_csv(sentence, sentiment):
    with open(CSV_FILE, "a", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow([sentence, sentiment])

def render_sentence(sentence, sentiment):
    if IN_COLAB and HAVE_HTML:
        color = {"Positive": "green", "Negative": "red", "Neutral": "orange"}[sentiment]
        display(HTML(
            f"<div style='font-family:monospace; padding:4px 0;'>"
            f"<span style='color:{color}; font-weight:600;'>{sentence}</span>"
            f"<span> &nbsp;â†’ [{sentiment}]</span>"
            f"</div>"
        ))
    else:
        color = {"Positive": Fore.GREEN, "Negative": Fore.RED, "Neutral": Fore.YELLOW}[sentiment]
        print(color + sentence + Fore.RESET + f" -> [{sentiment}]")

def analyze_sentiment(sentence):
    polarity = TextBlob(sentence).sentiment.polarity
    sentiment = "Positive" if polarity > 0 else ("Negative" if polarity < 0 else "Neutral")
    save_to_csv(sentence, sentiment)
    render_sentence(sentence, sentiment)

def test_with_fake_sentences(count=5, locale=None):
    local_fake = Faker(locale) if locale else fake
    for _ in range(count):
        analyze_sentiment(local_fake.sentence())

def view_saved_results():
    ensure_csv()
    with open(CSV_FILE, "r", encoding="utf-8", newline="") as f:
        reader = csv.reader(f)
        rows = list(reader)

    if len(rows) <= 1:
        if IN_COLAB and HAVE_HTML:
            display(HTML("<em>No saved results yet.</em>"))
        else:
            print("No saved results yet.")
        return

    if IN_COLAB and HAVE_HTML:
        body = "".join(
            f"<tr><td style='padding:4px 8px'>{r[0]}</td>"
            f"<td style='padding:4px 8px'>{r[1]}</td></tr>"
            for r in rows[1:]
        )
        display(HTML(
            "<table border='1' style='border-collapse:collapse'>"
            "<tr><th>Sentence</th><th>Sentiment</th></tr>"
            f"{body}</table>"
        ))
    else:
        print("\n--- Saved Results ---")
        for r in rows[1:]:
            print(f"{r[0]} -> [{r[1]}]")

def main():
    ensure_csv()
    while True:
        if IN_COLAB and HAVE_HTML:
            from IPython.display import display, HTML
            display(HTML(
                "<pre>--- Sentiment Analysis Program ---\n"
                "1. Enter a sentence\n"
                "2. Test with fake sentences\n"
                "3. View saved results\n"
                "4. Exit</pre>"
            ))
        else:
            print("\n--- Sentiment Analysis Program ---")
            print("1. Enter a sentence")
            print("2. Test with fake sentences")
            print("3. View saved results")
            print("4. Exit")

        try:
            choice = int(input("Choose an option: ").strip())
        except Exception:
            render_sentence("Please enter a valid number!", "Negative")
            continue

        if choice == 1:
            s = input("Enter a sentence: ")
            analyze_sentiment(s)
        elif choice == 2:
            try:
                n = int(input("How many sentences do you want to test? ").strip())
            except Exception:
                render_sentence("Please enter a valid number!", "Negative")
                continue
            test_with_fake_sentences(n)
        elif choice == 3:
            view_saved_results()
        elif choice == 4:
            print("Goodbye! ðŸ‘‹")
            break
        else:
            render_sentence("Invalid choice!", "Negative")

if __name__ == "__main__":
    main()